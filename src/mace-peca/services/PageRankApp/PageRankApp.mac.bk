
#include <stdlib.h>

#include <fstream>
#include <sstream>

service PageRankApp;
provides Null;

typedefs {
}
services {

}

constants {
  
}

constructor_parameters {
    double INACTIVE_THRESHOLD = 0.5;
    std::string graph_file_name = "input-graph";
    std::string partition_file_name = "input-graph-part";
    uint32_t N_PARTITION = 4;
}

messages {

}

auto_types {
  
}
 
state_variables {
  context GraphPartition<uint32_t pId> {
    uint32_t partitionId;

    mace::map< uint64_t, double > vertex_values;
    mace::map< uint64_t, mace::set<uint64_t> > edges;
    mace::map< uint64_t, uint32_t > vertex_map;
    mace::set< uint64_t > active_vertexes;
    mace::set< uint64_t > partition_vertexes;
    mace::set< uint64_t > inactive_neighbor_vertexes;

    uint64_t curr_round;
    
    mace::map< uint64_t, double > neighbor_vertex_vals;
    mace::set< uint64_t > updated_vertexes;
    
    mace::map< uint64_t, double > next_neighbor_vertex_vals;
    mace::set< uint64_t > next_updated_vertexes;
    mace::set< uint64_t > next_inactive_neighbor_vertexes;

  }

  context barrier {
    uint64_t curr_round;
    mace::set<>
  }
}


 
transitions {
  downcall maceInit()  {
    ADD_SELECTORS("PageRankApp");
    maceout << "Start PageRank computation!" << Log::endl;

    mace::map< uint64_t, uint32_t > vertex_map;
    mace::map< uint32_t, mace::set<uint64_t> > partition_vertexes;
    maceout << "Read partition from " << partition_file_name << Log::endl;
    std::ifstream partition_file( partition_file_name.c_str(), std::ifstream::in );

    std::string line;
    uint64_t line_number = 0;
    while( std::getline(partition_file, line) ) {
      std::stringstream ss(line);
      int pid = 0;
      ss >> pid;
      vertex_map[line_number] = pid;
      if( partition_vertexes[pid].count(line_number) == 0 ) {
        partition_vertexes[pid].insert(line_number);
      }

      line_number ++;
    }

    mace::map< uint64_t, mace::set<uint64_t> > edges;

    maceout << "Read graph from " << graph_file_name << Log::endl;
    std::ifstream graph_file( graph_file_name.c_str(), std::ifstream::in );

    while( std::getline(graph_file, line) ) {
      std::vector<std::string> strs = split_string(line, "\t");

      if( strs.size() == 2 ){
        std::stringstream ss1(strs[0]);
        std::stringstream ss2(strs[1]);

        int from_v, to_v;
        ss1 >> from_v;
        ss2 >> to_v;
        
        if( edges[from_v].count(to_v) == 0 ) {
          edges[from_v].insert(to_v);
        }
      }
    }
    maceout << "Done graph reading!!" << Log::endl;

    for( uint32_t pid=0; pid<N_PARTITION; pid++ ){
      maceout << "Start to handle Partition " << pid << Log::endl;
      mace::string partition_ctx_name = generateContextName("GraphPartition", pid);
      createNewOwnership("globalContext", partition_ctx_name);

      ASSERT( partition_vertexes.find(pid) != partition_vertexes.end() );

      mace::set<uint64_t>& vs = partition_vertexes[pid];
      mace::map<uint64_t, double> vvals;
      mace::vector< uint64_t > sub_graph_from_v;
      mace::vector< uint64_t > sub_graph_to_v;
      mace::map< uint64_t, uint32_t > vmap;

      for( mace::set<uint64_t>::iterator iter1 = vs.begin(); iter1 != vs.end(); iter1 ++ ){
        vvals[ *iter1 ] = 1.0;
        // maceout << "Handle vertex " << *iter1 << Log::endl;

        if( edges.find(*iter1) == edges.end() ) {
          continue;
        }
        mace::set<uint64_t>& es = edges[ *iter1 ];
        for( mace::set<uint64_t>::iterator iter2 = es.begin(); iter2 != es.end(); iter2 ++ ) {
          sub_graph_from_v.push_back(*iter1);
          sub_graph_to_v.push_back(*iter2);
          
          ASSERT( vertex_map.find(*iter2) != vertex_map.end() );
          if( vertex_map[*iter2] != pid ) {
            vmap[*iter2] = vertex_map[*iter2];
          }
        }
      }
      async_initGraphPartition( pid, vvals, sub_graph_from_v, sub_graph_to_v, vmap );
    }

  }

  async [GraphPartition<pId>] initGraphPartition(const uint32_t& pId, mace::map<uint64_t, double> const& vvals,
      mace::vector<uint64_t> const& sub_graph_from_v, mace::vector<uint64_t> const& sub_graph_to_v, 
      mace::map< uint64_t, uint32_t > const& vmap ) {
    
    ADD_SELECTORS("PageRankApp");
    maceout<< "To initialize GraphPartition " << pId << Log::endl;
    partitionId = pId;

    curr_round = 0;
    
    vertex_values = vvals;
    vertex_map = vmap;

    for( mace::map< uint64_t, double >::iterator iter=vertex_values.begin(); iter!=vertex_values.end(); iter++ ) {
      active_vertexes.insert( iter->first );
      partition_vertexes.insert( iter->first );
    }

    for( uint64_t i=0; i<sub_graph_from_v.size(); i++ ) {
      uint64_t from_v = sub_graph_from_v[i];
      uint64_t to_v = sub_graph_to_v[i];
      if( vvals.find(from_v) != vvals.end() && edges[from_v].count(to_v) == 0 ) {
        edges[from_v].insert(to_v);
      }
    }
    maceout<< "Done initialize GraphPartition("<< pId <<"). edge_size=" << edges.size() << " vertex_size="<< partition_vertexes.size() << Log::endl;

    async_startPageRank(pId);
  }

  async [GraphPartition<pId>] startPageRank( const uint32_t& pId ) {
    ADD_SELECTORS("PageRankApp");
    maceout << "Partition("<< pId <<") start PageRank computation!" << Log::endl;
    curr_round = 1;

    neighbor_vertex_vals = next_neighbor_vertex_vals;
    updated_vertexes = next_updated_vertexes;

    next_neighbor_vertex_vals.clear();
    next_updated_vertexes.clear();

    for( mace::set<uint64_t>::iterator iter=next_inactive_neighbor_vertexes.begin(); iter!=next_inactive_neighbor_vertexes.end(); iter++ ) {
      if( inactive_neighbor_vertexes.count(*iter)==0 ) {
        inactive_neighbor_vertexes.insert(*iter);
      }
    }
    next_inactive_neighbor_vertexes.clear();

    // set waiting neighbor vextex values
    mace::map<uint32_t, uint64_t> waitingVertexNumber;
    mace::set<uint64_t> counted_vertexes;
    for( uint32_t i=0; i<N_PARTITION; i++) {
      waitingVertexNumber[i] = 0;
    }

    for( mace::set<uint64_t>::iterator iter=active_vertexes.begin(); iter!=active_vertexes.end(); iter++ ) {
      const uint64_t& v = *iter;
      ASSERT( edges.find(v)!=edges.end() );
      const mace::set<uint64_t>& neighbor_vertexes = edges[v];

      for( mace::set<uint64_t>::const_iterator iter2=neighbor_vertexes.begin(); iter2!=neighbor_vertexes.end(); iter2++ ) {
        const uint64_t& nv = *iter2;
        if( inactive_neighbor_vertexes.count(nv) > 0 || partition_vertexes.count(nv) > 0 ) {
          continue;
        }

        if( neighbor_vertex_vals.find(nv) == neighbor_vertex_vals.end() ) {
          neighbor_vertex_vals[nv] = 0.0;
        }

        if( counted_vertexes.count(nv) == 0 ) {
          ASSERT( vertex_map.find(nv) != vertex_map.end() );
          uint32_t pid = vertex_map[nv];
          waitingVertexNumber[pid] = waitingVertexNumber[pid] + 1;
          counted_vertexes.insert(nv);
        }
      }
    }

    for( uint32_t i=0; i<N_PARTITION; i++) {
      if( i== pId ) {
        continue;
      }
      maceout << "Partition("<< pId <<") waiting Parition("<< i <<") n_vertex=" << waitingVertexNumber[i] << " for round "<< curr_round << Log::endl;
    }

    mace::set<uint64_t> latest_inactive_vertexes;
    async_distributeUpdateVertexVals(pId, latest_inactive_vertexes);
  }

  async [GraphPartition<pId>] sendVertexVals( const uint32_t& pId, const uint32_t& src_pid, const uint64_t& round, 
      mace::vector<uint64_t> const& new_vs, mace::vector<double> const& new_vals, mace::set<uint64_t> const& inactivevs ) {

    ADD_SELECTORS("PageRankApp");
    maceout << "Partition("<< pId <<") receive neighbor vertexes("<< new_vs.size() <<") and inactive vertexes("<< inactivevs.size() <<") from Partition("<< src_pid <<") of round " << round << Log::endl;

    ASSERT( round == curr_round+1 || round == curr_round );

    for( mace::set<uint64_t>::const_iterator iter=inactivevs.begin(); iter!=inactivevs.end(); iter++ ) {
      if( round == curr_round ) {
        if( inactive_neighbor_vertexes.count(*iter) == 0 ) {
          inactive_neighbor_vertexes.insert(*iter);
        }
        neighbor_vertex_vals.erase(*iter);
      } else if( round == curr_round + 1 ) {
        if( next_inactive_neighbor_vertexes.count(*iter) == 0 ) {
          next_inactive_neighbor_vertexes.insert(*iter);
        }
      }
    }
        
    for( uint64_t i=0; i<new_vs.size(); i++ ) {
      uint64_t v = new_vs[i];
      double val = new_vals[i];
      if( round == curr_round ) {
        if( neighbor_vertex_vals.find(v) != neighbor_vertex_vals.end() ) {
          neighbor_vertex_vals[v] = val;
          if( updated_vertexes.count(v) == 0 ) {
            updated_vertexes.insert(v);
          }
        } else {
          maceout << "Partition("<< pId <<") needn't vertex("<< v <<") from Partition("<< src_pid<<")!" << Log::endl;
          ASSERT(false);
        }
      } else if( round == curr_round + 1 ) {
        next_neighbor_vertex_vals[v] = val;
        if( next_updated_vertexes.count(v) == 0 ) {
          next_updated_vertexes.insert(v);
        }
      }
    }

    maceout << "Partition("<< pId <<") neighbor_vertex_vals.size=" << neighbor_vertex_vals.size() << " updated_vertexes.size=" << updated_vertexes.size() << Log::endl;

    if( updated_vertexes.size() == neighbor_vertex_vals.size() && updated_vertexes.size() != 0 ) {
      maceout << "Start computation on Partition("<< pId <<") for round " << curr_round << Log::endl;
      for( mace::map<uint64_t, double>::const_iterator iter=neighbor_vertex_vals.begin(); iter!=neighbor_vertex_vals.end(); iter++ ) {
        vertex_values[iter->first] = iter->second;
      }
      mace::set<uint64_t> latest_inactive_vertexes = computePageRank( vertex_values, edges, active_vertexes );

      curr_round ++;

      neighbor_vertex_vals = next_neighbor_vertex_vals;
      updated_vertexes = next_updated_vertexes;

      next_neighbor_vertex_vals.clear();
      next_updated_vertexes.clear();

      for( mace::set<uint64_t>::iterator iter=next_inactive_neighbor_vertexes.begin(); iter!=next_inactive_neighbor_vertexes.end(); iter++ ) {
        if( inactive_neighbor_vertexes.count(*iter)==0 ) {
          inactive_neighbor_vertexes.insert(*iter);
        }
      }
      next_inactive_neighbor_vertexes.clear();

      // set waiting neighbor vextex values
      mace::map<uint32_t, uint64_t> waitingVertexNumber;
      mace::set<uint64_t> counted_vertexes;
      for( uint32_t i=0; i<N_PARTITION; i++) {
        waitingVertexNumber[i] = 0;
      }
      for( mace::set<uint64_t>::iterator iter=active_vertexes.begin(); iter!=active_vertexes.end(); iter++ ) {
        const uint64_t& v = *iter;
        ASSERT( edges.find(v)!=edges.end() );
        const mace::set<uint64_t>& neighbor_vertexes = edges[v];

        for( mace::set<uint64_t>::const_iterator iter2=neighbor_vertexes.begin(); iter2!=neighbor_vertexes.end(); iter2++ ) {
          const uint64_t& nv = *iter2;
          if( inactive_neighbor_vertexes.count(nv) > 0 || partition_vertexes.count(nv) > 0) {
            continue;
          }

          if( neighbor_vertex_vals.find(nv) == neighbor_vertex_vals.end() ) {
            neighbor_vertex_vals[nv] = 0.0;
          }

          if( counted_vertexes.count(nv) == 0 ) {
            ASSERT( vertex_map.find(nv) != vertex_map.end() );
            uint32_t pid = vertex_map[nv];
            waitingVertexNumber[pid] = waitingVertexNumber[pid] + 1;
            counted_vertexes.insert(nv);
          }
        }
      }

      maceout << "For round("<< curr_round <<"), Partition("<< pId <<") has " << active_vertexes.size() << " vertexes!" << Log::endl;
      async_distributeUpdateVertexVals(pId, latest_inactive_vertexes);

      for( uint32_t i=0; i<N_PARTITION; i++) {
        if( i== pId ) {
          continue;
        }
        maceout << "Parition("<< pId <<") waiting Parition("<< i <<") n_vertex=" << waitingVertexNumber[i] << " for round "<< curr_round << Log::endl;
      }
    }
  }

  async [GraphPartition<pId>] distributeUpdateVertexVals( const uint32_t& pId, mace::set<uint64_t> const& latest_inactive_vertexes ) {
    ADD_SELECTORS("PageRankApp");
    maceout << "Partition("<< pId <<") send updated vertex values to neighbor!" << Log::endl;

    mace::map< uint32_t, mace::set<uint64_t> > updated_vs_set;
    mace::map< uint32_t, mace::vector<uint64_t> > updated_vs;
    mace::map< uint32_t, mace::vector<double> > updated_vals;
    mace::map< uint32_t, mace::set< uint64_t > > new_inactive_vertexes;

    for( mace::set<uint64_t>::iterator iter=active_vertexes.begin(); iter!=active_vertexes.end(); iter++ ) {
      const uint64_t& v = *iter;
      const mace::set<uint64_t>& nvs = edges[v];

      if( nvs.size() == 0 ) {
        continue;
      }

      double val = vertex_values[v]/nvs.size();

      for( mace::set<uint64_t>::iterator iter2=nvs.begin(); iter2!=nvs.end(); iter2++ ) {
        const uint64_t& nv = *iter2;
        // check if this vertex is inactive or included by this partition
        if( inactive_neighbor_vertexes.count(nv)>0 || partition_vertexes.count(nv)>0 ) {
          continue;
        }

        ASSERT( vertex_map.find(nv) != vertex_map.end() );
        uint64_t neighbor_pid = vertex_map[nv];

        if( updated_vs_set[neighbor_pid].count(v) == 0 ) {
          updated_vs_set[neighbor_pid].insert(v);
          updated_vs[neighbor_pid].push_back(v);
          updated_vals[neighbor_pid].push_back(val);
        }
      }
    }

    for( mace::set<uint64_t>::iterator iter=latest_inactive_vertexes.begin(); iter!=latest_inactive_vertexes.end(); iter++ ) {
      const uint64_t& v = *iter;
      const mace::set<uint64_t>& nvs = edges[v];

      for( mace::set<uint64_t>::iterator iter2=nvs.begin(); iter2!=nvs.end(); iter2++ ) {
        const uint64_t& nv = *iter2;

        if( partition_vertexes.count(nv)>0 ) {
          continue;
        }
        ASSERT( vertex_map.find(nv) != vertex_map.end() );
        uint64_t neighbor_pid = vertex_map[nv];
        if( new_inactive_vertexes[neighbor_pid].count(v) == 0 ) {
          new_inactive_vertexes[neighbor_pid].insert(v);
        }
      }
    }

    for( mace::map< uint32_t, mace::vector<uint64_t> >::iterator iter=updated_vs.begin(); iter!=updated_vs.end(); iter++ ) {
      mace::set<uint64_t> inactivevs;
      if( new_inactive_vertexes.find(iter->first) != new_inactive_vertexes.end() ) {
        inactivevs = new_inactive_vertexes[iter->first];
      } 
      maceout << "Partition("<< pId <<") send updated vertexes("<< (iter->second).size() <<") and inactive vertexes("<< inactivevs.size() <<") to Partition("<< iter->first <<") for round " << curr_round << Log::endl;
      async_sendVertexVals( iter->first, pId, curr_round, iter->second, updated_vals[iter->first], inactivevs );
    }

  }
}

routines {

  [__null] mace::set<uint64_t> computePageRank( mace::map<uint64_t, double>& vertex_values, 
      mace::map<uint64_t, mace::set<uint64_t> >& edges, mace::set<uint64_t>& active_vertexes ) {
      
      mace::map<uint64_t, double> new_vertex_values;
      for( mace::set<uint64_t>::iterator iter1=active_vertexes.begin(); iter1!=active_vertexes.end(); iter1++ ) {
        double new_val = 0;

        const mace::set<uint64_t>& nvs = edges[*iter1];
        for( mace::set<uint64_t>::const_iterator iter2=nvs.begin(); iter2!=nvs.end(); iter2++ ) {
          ASSERT( vertex_values.find(*iter2) != vertex_values.end() );
          new_val += vertex_values[*iter2];
        }
        new_vertex_values[*iter1] = new_val;
      }

      mace::set<uint64_t> new_inactive_vertexes;
      for( mace::map<uint64_t, double>::iterator iter=new_vertex_values.begin(); iter!=new_vertex_values.end(); iter++ ) {
        if( abs(iter->second - vertex_values[iter->first]) < INACTIVE_THRESHOLD ) {
          new_inactive_vertexes.insert(iter->first);
        }
        vertex_values[iter->first] = iter->second;
      }

      for( mace::set<uint64_t>::iterator iter=new_inactive_vertexes.begin(); iter!=new_inactive_vertexes.end(); iter++ ) {
        active_vertexes.erase(*iter);
      }

      return new_inactive_vertexes;
  }

  [__null] std::vector<std::string> split_string(const std::string& str, const std::string& tok){
    std::vector<std::string> strs;

    std::string to_split_string = str;
    int len = tok.size();
    while(true) {
        size_t pos = to_split_string.find(tok);
        if( pos == std::string::npos ){
            break;
        }

        std::string str1 = to_split_string.substr(0, pos);
        to_split_string = to_split_string.substr(pos+len);

        strs.push_back(str1);
    }

    strs.push_back(to_split_string);
    return strs;
  }

  [__null] mace::string generateContextName( const mace::string& ctxName, const uint32_t& id) {
    std::ostringstream oss;
    oss << ctxName <<"["<<id<<"]";
    return oss.str();
  }
}

